<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/08/15/zi-bian-ma-qi-autoencoder/"/>
      <url>/2019/08/15/zi-bian-ma-qi-autoencoder/</url>
      
        <content type="html"><![CDATA[<h2 id="一-什么是自编码器"><a href="#一-什么是自编码器" class="headerlink" title="一. 什么是自编码器"></a>一. 什么是自编码器</h2><p>自动编码器 autoencoder, 简单表现编码器为将一组数据进行压缩编码(降维), 解码器将这组数据恢复成高维的数据. 这种编码和解码的过程不是无损的, 因此最终的输出和输入是有一些差异的, 且非常依赖于训练的数据集.</p><p>如图所示<br><img src="https://img-blog.csdnimg.cn/20190813221832515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>如上面这张图所示, 对于一个简单的三层线性神经网络组成的自编码器, 我们在进行神经网络的搭建过程中, 将(input, hidden) 这个过程叫做编码器, 将(hidden, output) 这个过程叫做解码器. 对于mnist数据集而言, 它的维度变化是 784 -&gt; x -&gt; 784, 其中, x &lt; 784, 是编码的维度.</p><hr><h2 id="二-有什么作用"><a href="#二-有什么作用" class="headerlink" title="二. 有什么作用"></a>二. 有什么作用</h2><h3 id="1-图像去噪"><a href="#1-图像去噪" class="headerlink" title="1) 图像去噪"></a>1) 图像去噪</h3><p>看上去很强啊<br><img src="https://img-blog.csdnimg.cn/20190813222525217.png" alt="在这里插入图片描述"></p><h3 id="2-可视化降维"><a href="#2-可视化降维" class="headerlink" title="2) 可视化降维"></a>2) 可视化降维</h3><hr><h2 id="三-如何实现"><a href="#三-如何实现" class="headerlink" title="三. 如何实现"></a>三. 如何实现</h2><p>训练神经网络需要定义损失函数, 那么这个自编码器的损失衡量值是什么? </p><p>衡量损失的值是由网络的输出结果和输入决定的. 也就是说, 是由这两个784维数据的差别决定的.</p><h3 id="1-全连接层实现"><a href="#1-全连接层实现" class="headerlink" title="1) 全连接层实现"></a>1) 全连接层实现</h3><p>首先定义一个神经网络</p><pre class=" language-py"><code class="language-py">class Autoencoder(nn.Module):    def __init__(self, encoding_dim):        super(Autoencoder, self).__init__()        ## encoder ##        self.encoder = nn.Linear(784, encoding_dim)        ## decoder ##        self.decoder = nn.Linear(encoding_dim, 784)    def forward(self, x):        # define feedforward behavior         # and scale the *output* layer with a sigmoid activation function#         print(x.shape)        x = x.view(-1, 784)        x = F.relu(self.encoder(x))        x = torch.sigmoid(self.decoder(x))        return x# initialize the NNencoding_dim = 128model = Autoencoder(encoding_dim)</code></pre><p>定义损失函数和优化器</p><pre class=" language-py"><code class="language-py"># specify loss functioncriterion = nn.MSELoss()# specify loss functionoptimizer = torch.optim.Adam(model.parameters(), lr=0.001)</code></pre><p>训练过程, 一共20个epochs, 话说pytorch还真慢, 这么简单的网络都要训练好一会</p><pre class=" language-py"><code class="language-py"># number of epochs to train the modeln_epochs = 20for epoch in range(1, n_epochs+1):    # monitor training loss    train_loss = 0.0    ###################    # train the model #    ###################    for data in train_loader:        # _ stands in for labels, here        images, _ = data        # flatten images        images = images.view(images.size(0), -1)        # clear the gradients of all optimized variables        optimizer.zero_grad()        # forward pass: compute predicted outputs by passing inputs to the model#         print(images.shape)        outputs = model(images)        # calculate the loss        loss = criterion(outputs, images)        # backward pass: compute gradient of the loss with respect to model parameters        loss.backward()        # perform a single optimization step (parameter update)        optimizer.step()        # update running training loss        train_loss += loss.item()*images.size(0)    # print avg training statistics     train_loss = train_loss/len(train_loader)    print('Epoch: {} \tTraining Loss: {:.6f}'.format(        epoch,         train_loss        ))</code></pre><p>训练过程的损失变化</p><pre class=" language-py"><code class="language-py">Epoch: 1     Training Loss: 0.342308Epoch: 2     Training Loss: 0.081272Epoch: 3     Training Loss: 0.058724Epoch: 4     Training Loss: 0.051274Epoch: 5     Training Loss: 0.047382Epoch: 6     Training Loss: 0.044760Epoch: 7     Training Loss: 0.043184Epoch: 8     Training Loss: 0.042066Epoch: 9     Training Loss: 0.041246Epoch: 10     Training Loss: 0.040589Epoch: 11     Training Loss: 0.040059Epoch: 12     Training Loss: 0.039646Epoch: 13     Training Loss: 0.039272Epoch: 14     Training Loss: 0.038980Epoch: 15     Training Loss: 0.038733Epoch: 16     Training Loss: 0.038524Epoch: 17     Training Loss: 0.038328Epoch: 18     Training Loss: 0.038162Epoch: 19     Training Loss: 0.038012Epoch: 20     Training Loss: 0.037874</code></pre><p>那么效果如何呢? 上面一排是输入图像, 下面一排是输出图像. 经过自编码器之后, 还原度还是很高的.</p><p><img src="https://img-blog.csdnimg.cn/2019081323064636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-测试-对有噪声图像的自编码"><a href="#2-测试-对有噪声图像的自编码" class="headerlink" title="2) 测试: 对有噪声图像的自编码"></a>2) 测试: 对有噪声图像的自编码</h3><p>首先查看一张图片</p><pre class=" language-py"><code class="language-py">a_img = np.squeeze(images[0])print(a_img.shape)print(np.max(a_img))print(np.min(a_img))plt.imshow(a_img, cmap='gray')</code></pre><p><img src="https://img-blog.csdnimg.cn/20190813232552587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后向其中加入噪声</p><pre class=" language-py"><code class="language-py">a_img_x = a_img + 0.08 * np.random.normal(loc=0.0, scale=1.0, size=a_img.shape)plt.imshow(a_img_x, cmap='gray')</code></pre><p>这是加入噪声之后的图片, 可以看出差别还是很大的. 那么我们的编码器能还原出如何的效果呢?<br><img src="https://img-blog.csdnimg.cn/20190813232635605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-py"><code class="language-py">a_img_output = model(torch.Tensor(a_img_x).view(1, -1))print(a_img_output.shape)output_img = a_img_output.view(28, 28)output_img = output_img.detach().numpy()plt.imshow(output_img, cmap='gray')</code></pre><p>这是还原后的, 说实话看到这个图片我心里也是很惊讶的. 就在于加入那么多噪声之后, 居然还可以还原的如此清晰. 当然这是对于MNIST数据集而言, 这个数据集比较简单.<br><img src="https://img-blog.csdnimg.cn/20190813232753783.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-卷积层实现"><a href="#3-卷积层实现" class="headerlink" title="3) 卷积层实现"></a>3) 卷积层实现</h3><p>不同之处在于定义自编码器的神经网络结构<br>如图所示<br><img src="https://img-blog.csdnimg.cn/2019081323523769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到在decoder中经过了两个反卷积层, <del>但是由于水平有限, 这个反卷积层看着好奇怪, 不知道是怎么反卷积的. </del></p><p>pytorch实现</p><pre class=" language-py"><code class="language-py">import torch.nn as nnimport torch.nn.functional as F# define the NN architectureclass ConvAutoencoder(nn.Module):    def __init__(self):        super(ConvAutoencoder, self).__init__()        ## encoder layers ##        self.conv1 = nn.Conv2d(1, 16, 3, padding=1)        self.conv2 = nn.Conv2d(16, 4, 3, padding=1)        self.pool = nn.MaxPool2d(2, 2)                ## decoder layers ##        ## a kernel of 2 and a stride of 2 will increase the spatial dims by 2        self.t_conv1 = nn.ConvTranspose2d(4, 16, 2, stride=2)        self.t_conv2 = nn.ConvTranspose2d(16, 1, 2, stride=2)    def forward(self, x):        ## encode ##        ## decode ##        ## apply ReLu to all hidden layers *except for the output layer        ## apply a sigmoid to the output layer        x = F.relu(self.conv1(x))        x = self.pool(x)        x = F.relu(self.conv2(x))        x = self.pool(x)        x = F.relu(self.t_conv1(x))        x = torch.sigmoid(self.t_conv2(x))        return x# initialize the NNmodel = ConvAutoencoder()print(model)</code></pre><p>训练起来比全连接层的网络还要慢很多, 而损失值的降低也慢很多, 不像之前从epoch 1 到 epoch 2 直接就断崖式下跌了. 下面是损失值的变化过程, 只训练了 15个epoch. 从损失之上看这个效果好像差很多?</p><pre class=" language-py"><code class="language-py">Epoch: 1     Training Loss: 0.448799Epoch: 2     Training Loss: 0.266815Epoch: 3     Training Loss: 0.251290Epoch: 4     Training Loss: 0.240823Epoch: 5     Training Loss: 0.231836Epoch: 6     Training Loss: 0.220550Epoch: 7     Training Loss: 0.210341Epoch: 8     Training Loss: 0.202768Epoch: 9     Training Loss: 0.197010Epoch: 10     Training Loss: 0.193259Epoch: 11     Training Loss: 0.190589Epoch: 12     Training Loss: 0.188406Epoch: 13     Training Loss: 0.186529Epoch: 14     Training Loss: 0.184983Epoch: 15     Training Loss: 0.183579</code></pre><p>观察下图的数字9的话, 可以看到损失了不少.<br><img src="https://img-blog.csdnimg.cn/20190814000232600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>再看看噪声图片的处理能力如何</strong></p><p>原图:<br><img src="https://img-blog.csdnimg.cn/20190814000948937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>加入噪声:<br><img src="https://img-blog.csdnimg.cn/20190814001018505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>经过自编码器<br><img src="https://img-blog.csdnimg.cn/20190814001040411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>呃, 效果似乎有点不是很对, 可能是训练的epoch太少了, 毕竟我们可以前面看到训练15个epoch的损失值还是达到了0.18, 而在全连接层的简单自编码器上第二个epoch的损失值就达到了0.08</p><p>另一张图片</p><p><img src="https://img-blog.csdnimg.cn/20190814001258299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>噪声<br><img src="https://img-blog.csdnimg.cn/20190814001310217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190814002017372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dqaDI2MjIwNzUxMjc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h2 id="四-一些小细节"><a href="#四-一些小细节" class="headerlink" title="四. 一些小细节"></a>四. 一些小细节</h2><ol><li><p>numpy 的 squeeze 函数<br><a href="https://blog.csdn.net/zenghaitao0128/article/details/78512715" target="_blank" rel="noopener">参考博客</a><br>作用：<strong>从数组的形状中删除单维度条目，即把shape中为1的维度去掉</strong></p></li><li><p>给MNIST图片加入噪声的方法</p><pre class=" language-py"><code class="language-py">test_img_x = test_img + 0.08 * np.random.normal(loc=0.0, scale=1.0, size=test_img.shape)</code></pre><p>就是加入一些随机值, 在原图的基础上进行小幅度修改.</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一键安装v2ray</title>
      <link href="/2019/08/15/yi-jian-an-zhuang-v2ray/"/>
      <url>/2019/08/15/yi-jian-an-zhuang-v2ray/</url>
      
        <content type="html"><![CDATA[<p>0、我的vps版本：Ubuntu 18.10 x64。 地点：东京。</p><p>1、v2ray官方给出了一键安装脚本<br><code>bash &lt;(curl -L -s https://install.direct/go.sh)</code></p><p>2、很快就可以安装好了，可以用这个命令来查看状态<br><code>service v2ray status</code></p><p>3、有以下这些命令，刚开始需要启动服务<br><code>service v2ray start|stop|status|reload|restart|force-reload</code></p><p>4、由于是一键安装，于是那些设置都是默认的，可以到<code>/etc/v2ray/config.json</code>来配置自己的服务器，也是到这里找到设置然后给我们的客户端进行设置。</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0xww85mr9j30rw0ng40a.jpg" alt="在这里插入图片描述"><br>5、延迟在90ms左右<br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0xwwpt5ekj30pv038aa0.jpg" alt="在这里插入图片描述"><br>6、一键进行BBR加速</p><p><code>wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code></p><p>7、我选择的是6<br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0xwxb7ee4j30oi0jt40k.jpg" alt="在这里插入图片描述"></p><p>8、测试了一下延迟，最低居然达到了31ms，简直令人发指！！！</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0xwy4d8zcj30qf01u747.jpg" alt="在这里插入图片描述"><br>9、多试几次稳定在60ms左右，也是非常低的延迟了！<br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0xwyj0jy7j30q501tq2u.jpg" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hands-on-ml chapter2 笔记1</title>
      <link href="/2019/03/30/handson-ml-chp2/"/>
      <url>/2019/03/30/handson-ml-chp2/</url>
      
        <content type="html"><![CDATA[<p>批量学习（batch learning），一次性批量输入给学习算法，可以被形象的称为填鸭式学习。<br>在线学习（online learning），按照顺序，循序的学习，不断的去修正模型，进行优化。</p><p>batch learning 如果数据很大的话，可以使用MapReduce技术，或者使用online learning。</p><p>performance measure 使用RMSE（root mean square error），也就是均方根误差。看<a href="https://www.jianshu.com/p/9ee85fdad150" target="_blank" rel="noopener">https://www.jianshu.com/p/9ee85fdad150</a> 。学到了root 是根号的意思。</p><p>hypothesis ：假设<br>outlier ：异常值</p><p>有很多异常值（很大）的话，可能倾向于用MAE。</p><blockquote><p>RMSE 和 MAE 都是测量预测值和目标值两个向量距离的方法。有多种测量距离的方法，或范数：<br>计算对应欧几里得范数的平方和的根（RMSE）：这个距离介绍过。它也称作ℓ2范数，标记为 （或只是 ）。<br>计算对应于ℓ1（标记为 ）范数的绝对值和（MAE）。有时，也称其为曼哈顿范数，因为它测量了城市中的两点，沿着矩形的边行走的距离。<br>更一般的，包含n个元素的向量v的ℓk范数（K 阶闵氏范数），定义成</p></blockquote><blockquote><p>ℓ0（汉明范数）只显示了这个向量的基数（即，非零元素的个数），ℓ∞（切比雪夫范数）是向量中最大的绝对值。</p></blockquote><blockquote><p>范数的指数越高，就越关注大的值而忽略小的值。这就是为什么 RMSE 比 MAE 对异常值更敏感。但是当异常值是指数分布的（类似正态曲线），RMSE 就会表现很好。</p></blockquote><p>entry ：条目，entries<br>histogram ：统计直方图<br>histogram ：后端</p><p>数据可能经过预处理，这不一定会出错，但你得知道数据是怎么来的。</p><p>feature scaling ：特征缩放</p><p>如果右边的属性很长，会处理这些属性，使其变为正态分布。 </p><p>P49：生成随机排列以获得比较随机的train和test集划分。random seed控制结果。<br>P50：使用hash方法来生成稳定的train、test集，当得到新的数据时，原来的划分保持不变，新的实例同样进行划分。<br>调用的库是hashlib，可以稍微研究一下python中的hash方法。<br>增加一列索引index。<br>可以使用scikit learn提供的函数</p><p>P51：讲到要使用分层采样，因为不同层次的样本数量是不一样的，如果全都随机采样的话，误差会比较大。<br>strata：层<br>stratify：分层<br>使用sklearn提供的分层类，配合pandas的where等，分层正确可以获得较大的性能提升。<br>还可以查看分层比例。</p><p>pandas的where方法</p><blockquote><p>Series.where(cond, other=nan, inplace=False, axis=None, level=None, errors=‘raise’, try_cast=False, raise_on_error=None)<br>如果 cond 为真，保持原来的值，否则替换为other， inplace为真标识在原数据上操作，为False标识在原数据的copy上操作。</p></blockquote><p>insight：见解，洞察力<br>density：密度</p><p>分析数据，数据的可视化：可以得到数据之间的联系，哪些数据更有用，从而更加有技巧地进行训练；而且，从数据的可视化中，就可以得出一些只是看数据得不到的结论，图像能使信息暴露出来，所以matplotlib在机器学习中会有那么重要的作用，而看到的哪些讲机器学习的书、比赛的notebook，他们都有大量的数据可视化，这是呈现数据，探索数据的过程，也是：为什么此模型能够比其他人的模型更加强大的原因。但是数据分析有套路，要多看熟悉这些套路。</p><p>alpha参数的作用：它是一个设置透明度的参数。看到书上用它时，觉得没啥用啊，不是每个点都会设置一样的透明度吗？但是转念一想，存在透明度的话，点多的地方，颜色就会深，而点少的地方颜色就会浅。这就是透明度的作用啊！</p><p>correlation：相关；关联<br>median：中位数<br>coefficient：率；系数<br>correlation coefficient：相关系数</p><p>可以使用corr方法获取属性两两之间的（linear）相关性。（可以说是很强了！没想到居然还提供了这种方法。不过相关系数是怎么计算的？）<br>得到了相关性，然后呢？有什么作用吗？<br>书上说：想要移除掉相关性大的属性，避免重复。所谓数据清洗。</p><p>属性的结合，可能会获取更加有效的数据。</p><p>数据清洗：missing features<br>三种策略<br>sklearn提供了一种Imputer类来实现确实数据的填充</p><p>要设计自己的读取、划分数据函数，一种通用的方法，能够对不同的数据进行划分。</p><p>想到一个问题：如何将自己写的类，在python中import？就像numpy那样？但是numpy不是一个类而是一个包，那么如何制作自己的包？</p><p>interfeace：接口</p><p>P61讲述了sklearn的设计风格<br>评估器、转换器等的设计模式，统一性。</p><p>将文本属性转化成数字。标签编码。</p><p>sklearn.preprocessing </p><p>独热编码OneHotEncoder</p><p>sparse matrix：稀疏矩阵。书上一般说SciPy sparse matrix</p><p>text attribute -&gt; num -&gt; one hot; text -&gt; one hot; 可选scipy</p><p>设计自定义的transformers，三种method，fit，transform，fit_transform。<br>使用两个基类，提供一些功能。</p><p>feature scaling：特征缩放<br>normalization、standardization(less attected by outliers)<br>只能向数据集拟合：这样更准确。</p><p>pipelines class<br>数值属性和文本属性的特征可以分开设置pipeline，然后可以使用FeatureUnion来合并，真是方便！不过这个pipeline的设计有点麻烦。</p><p>选择模型、拟合、计算error。<br>underfitting and overfitting<br>cross validation：交叉验证。比较可靠的评估方式。<br>utility function：效用函数。越大越好<br>cost function：成本函数。越小越好</p><p>overfitting的可怕，还以为放出决策树回归出来会吊打线性回归呢，结果被吊打了，哈哈。</p><p>ensemble learning：集成学习。如random forests</p><p>把模型和训练结果保存下来，以便以后的对比。<br>可以使用pickle，或者sklearn.externals.joblib。<br>可以说是很方便了。</p><p>fine tune：微调</p><p>超参数：hyperparameter</p><blockquote><p>在机器学习的上下文中，超参数是在开始学习过程之前设置值的参数，而不是通过训练得到的参数数据。通常情况下，需要对超参数进行优化，给学习机选择一组最优超参数，以提高学习的性能和效果。<br>在机器学习的上下文中，超参数是在开始学习过程之前设置值的参数。 相反，其他参数的值通过训练得出。<br>超参数：<br>定义关于模型的更高层次的概念，如复杂性或学习能力。<br>不能直接从标准模型培训过程中的数据中学习，需要预先定义。<br>可以通过设置不同的值，训练不同的模型和选择更好的测试值来决定</p></blockquote><p>超参数的一些示例：</p><ul><li>树的数量或树的深度</li><li>矩阵分解中潜在因素的数量</li><li>学习率（多种模式）</li><li>深层神经网络隐藏层数</li><li>k均值聚类中的簇数</li></ul><p>amazing Grid Search！直译是网格搜索，但是显然不能这么理解。<br>这是sklearn提供的一种超级方便的选择hyperparameter的工具，简直是开挂啊。fine tune果然不赖。<br>还有一些分析的技巧。不过话说想要选好一组适合的超参数要训练好多组啊。<br>甚至直接获取the best estimator</p><p>Randomized Search 和 Gird相比，有几个有点。但目的和作用是一样的。</p><p>Ensemble Method 集成方法</p><p>分析最佳模型和他们的误差，可以获得更深的对问题的理解。比如可以给出每个属性对于做出准确预测的相对重要性，然后去掉某些属性，是否会使得分类更加准确。</p><p>maintain：维护</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp datalab实验</title>
      <link href="/2019/03/29/csapp-datalab-shi-yan/"/>
      <url>/2019/03/29/csapp-datalab-shi-yan/</url>
      
        <content type="html"><![CDATA[<p>datalab 实验</p><p>代码如下</p><a id="more"></a><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*  * CS:APP Data Lab  *  * &lt;Please put your name and userid here> *  * bits.c - Source file with your solutions to the Lab. *          This is the file you will hand in to your instructor. * * WARNING: Do not include the &lt;stdio.h> header; it confuses the dlc * compiler. You can still use printf for debugging without including * &lt;stdio.h>, although you might get a compiler warning. In general, * it's not good practice to ignore compiler warnings, but in this * case it's OK.   */</span><span class="token macro property">#<span class="token directive keyword">if</span> 0</span><span class="token comment" spellcheck="true">/* * Instructions to Students: * * STEP 1: Read the following instructions carefully. */</span>You will provide your solution to the Data Lab byediting the collection of functions in <span class="token keyword">this</span> source file<span class="token punctuation">.</span>INTEGER CODING RULES<span class="token operator">:</span>  Replace the <span class="token string">"return"</span> statement in each function with one  <span class="token operator">or</span> more lines of C code that implements the function<span class="token punctuation">.</span> Your code   must conform to the following style<span class="token operator">:</span>  <span class="token keyword">int</span> <span class="token function">Funct</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* brief description of how your implementation works */</span>      <span class="token keyword">int</span> var1 <span class="token operator">=</span> Expr1<span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> varM <span class="token operator">=</span> ExprM<span class="token punctuation">;</span>      varJ <span class="token operator">=</span> ExprJ<span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      varN <span class="token operator">=</span> ExprN<span class="token punctuation">;</span>      <span class="token keyword">return</span> ExprR<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Each <span class="token string">"Expr"</span> is an expression <span class="token keyword">using</span> ONLY the following<span class="token operator">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> Integer constants <span class="token number">0</span> through <span class="token function">255</span> <span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inclusive<span class="token punctuation">.</span> You are      <span class="token operator">not</span> allowed to use big constants such as <span class="token number">0xffffffff</span><span class="token punctuation">.</span>  <span class="token number">2</span><span class="token punctuation">.</span> Function arguments <span class="token operator">and</span> local <span class="token function">variables</span> <span class="token punctuation">(</span>no global variables<span class="token punctuation">)</span><span class="token punctuation">.</span>  <span class="token number">3</span><span class="token punctuation">.</span> Unary integer operations <span class="token operator">!</span> <span class="token operator">~</span>  <span class="token number">4</span><span class="token punctuation">.</span> Binary integer operations <span class="token operator">&amp;</span> <span class="token operator">^</span> <span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">>></span>  Some of the problems restrict the set of allowed operators even further<span class="token punctuation">.</span>  Each <span class="token string">"Expr"</span> may consist of multiple operators<span class="token punctuation">.</span> You are <span class="token operator">not</span> restricted to  one <span class="token keyword">operator</span> per line<span class="token punctuation">.</span>  You are expressly forbidden to<span class="token operator">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> Use any control constructs such as <span class="token keyword">if</span><span class="token punctuation">,</span> <span class="token keyword">do</span><span class="token punctuation">,</span> <span class="token keyword">while</span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">,</span> <span class="token keyword">switch</span><span class="token punctuation">,</span> etc<span class="token punctuation">.</span>  <span class="token number">2</span><span class="token punctuation">.</span> Define <span class="token operator">or</span> use any macros<span class="token punctuation">.</span>  <span class="token number">3</span><span class="token punctuation">.</span> Define any additional functions in <span class="token keyword">this</span> file<span class="token punctuation">.</span>  <span class="token number">4</span><span class="token punctuation">.</span> Call any functions<span class="token punctuation">.</span>  <span class="token number">5</span><span class="token punctuation">.</span> Use any other operations<span class="token punctuation">,</span> such as <span class="token operator">&amp;&amp;</span><span class="token punctuation">,</span> <span class="token operator">||</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> <span class="token operator">or</span> <span class="token operator">?</span><span class="token operator">:</span>  <span class="token number">6</span><span class="token punctuation">.</span> Use any form of casting<span class="token punctuation">.</span>  <span class="token number">7</span><span class="token punctuation">.</span> Use any data type other than <span class="token keyword">int</span><span class="token punctuation">.</span>  This implies that you     cannot use arrays<span class="token punctuation">,</span> structs<span class="token punctuation">,</span> <span class="token operator">or</span> unions<span class="token punctuation">.</span>  You may assume that your machine<span class="token operator">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> Uses 2s complement<span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">-</span>bit representations of integers<span class="token punctuation">.</span>  <span class="token number">2</span><span class="token punctuation">.</span> Performs right shifts arithmetically<span class="token punctuation">.</span>  <span class="token number">3</span><span class="token punctuation">.</span> Has unpredictable behavior when shifting an integer by more     than the word size<span class="token punctuation">.</span>EXAMPLES OF ACCEPTABLE CODING STYLE<span class="token operator">:</span>  <span class="token comment" spellcheck="true">/*   * pow2plus1 - returns 2^x + 1, where 0 &lt;= x &lt;= 31   */</span>  <span class="token keyword">int</span> <span class="token function">pow2plus1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* exploit ability of shifts to compute powers of 2 */</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*   * pow2plus4 - returns 2^x + 4, where 0 &lt;= x &lt;= 31   */</span>  <span class="token keyword">int</span> <span class="token function">pow2plus4</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* exploit ability of shifts to compute powers of 2 */</span>     <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>     result <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>FLOATING POINT CODING RULESFor the problems that require you to implent floating<span class="token operator">-</span>point operations<span class="token punctuation">,</span>the coding rules are less strict<span class="token punctuation">.</span>  You are allowed to use looping <span class="token operator">and</span>conditional control<span class="token punctuation">.</span>  You are allowed to use both ints <span class="token operator">and</span> unsigneds<span class="token punctuation">.</span>You can use arbitrary integer <span class="token operator">and</span> <span class="token keyword">unsigned</span> constants<span class="token punctuation">.</span>You are expressly forbidden to<span class="token operator">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> Define <span class="token operator">or</span> use any macros<span class="token punctuation">.</span>  <span class="token number">2</span><span class="token punctuation">.</span> Define any additional functions in <span class="token keyword">this</span> file<span class="token punctuation">.</span>  <span class="token number">3</span><span class="token punctuation">.</span> Call any functions<span class="token punctuation">.</span>  <span class="token number">4</span><span class="token punctuation">.</span> Use any form of casting<span class="token punctuation">.</span>  <span class="token number">5</span><span class="token punctuation">.</span> Use any data type other than <span class="token keyword">int</span> <span class="token operator">or</span> <span class="token keyword">unsigned</span><span class="token punctuation">.</span>  This means that you     cannot use arrays<span class="token punctuation">,</span> structs<span class="token punctuation">,</span> <span class="token operator">or</span> unions<span class="token punctuation">.</span>  <span class="token number">6</span><span class="token punctuation">.</span> Use any floating point data types<span class="token punctuation">,</span> operations<span class="token punctuation">,</span> <span class="token operator">or</span> constants<span class="token punctuation">.</span>NOTES<span class="token operator">:</span>  <span class="token number">1</span><span class="token punctuation">.</span> Use the <span class="token function">dlc</span> <span class="token punctuation">(</span>data lab checker<span class="token punctuation">)</span> <span class="token function">compiler</span> <span class="token punctuation">(</span>described in the handout<span class="token punctuation">)</span> to      check the legality of your solutions<span class="token punctuation">.</span>  <span class="token number">2</span><span class="token punctuation">.</span> Each function has a maximum number of <span class="token function">operators</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token operator">~</span> <span class="token operator">&amp;</span> <span class="token operator">^</span> <span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">>></span><span class="token punctuation">)</span>     that you are allowed to use <span class="token keyword">for</span> your implementation of the function<span class="token punctuation">.</span>      The max <span class="token keyword">operator</span> count is checked by dlc<span class="token punctuation">.</span> Note that <span class="token string">'='</span> is <span class="token operator">not</span>      counted<span class="token punctuation">;</span> you may use as many of these as you want without penalty<span class="token punctuation">.</span>  <span class="token number">3</span><span class="token punctuation">.</span> Use the btest test harness to check your functions <span class="token keyword">for</span> correctness<span class="token punctuation">.</span>  <span class="token number">4</span><span class="token punctuation">.</span> Use the BDD checker to formally verify your functions  <span class="token number">5</span><span class="token punctuation">.</span> The maximum number of ops <span class="token keyword">for</span> each function is given in the     header comment <span class="token keyword">for</span> each function<span class="token punctuation">.</span> If there are any inconsistencies      between the maximum ops in the writeup <span class="token operator">and</span> in <span class="token keyword">this</span> file<span class="token punctuation">,</span> consider     <span class="token keyword">this</span> file the authoritative source<span class="token punctuation">.</span><span class="token comment" spellcheck="true">/* * STEP 2: Modify the following functions according the coding rules. *  *   IMPORTANT. TO AVOID GRADING SURPRISES: *   1. Use the dlc compiler to check that your solutions conform *      to the coding rules. *   2. Use the BDD checker to formally verify that your solutions produce  *      the correct answers. */</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">/*  * bitAnd - x&amp;y using only ~ and |  *   Example: bitAnd(6, 5) = 4 *   Legal ops: ~ | *   Max ops: 8 *   Rating: 1 */</span><span class="token keyword">int</span> <span class="token function">bitAnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator">~</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * getByte - Extract byte n from word x *   Bytes numbered from 0 (LSB) to 3 (MSB) *   Examples: getByte(0x12345678,1) = 0x56 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 6 *   Rating: 2 */</span> <span class="token keyword">int</span> <span class="token function">getByte</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token operator">&amp;</span><span class="token number">0x000000ff</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*????Byte???????????????????24????????????????????n????????????????(3 - n = 3 + ~n + 1) &lt;&lt; 3????????*/</span><span class="token comment" spellcheck="true">/*  * logicalShift - shift x to the right by n, using a logical shift *   Can assume that 0 &lt;= n &lt;= 31 *   Examples: logicalShift(0x87654321,4) = 0x08765432 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 20 *   Rating: 3  */</span><span class="token keyword">int</span> <span class="token function">logicalShift</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">>></span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>t <span class="token operator">>></span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token operator">~</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*??????????????????????1???????n = 0?????????????????*/</span><span class="token comment" spellcheck="true">/* * bitCount - returns count of number of 1's in word *   Examples: bitCount(5) = 2, bitCount(7) = 3 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 40 *   Rating: 4 */</span><span class="token keyword">int</span> <span class="token function">bitCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ??????????????2?4?8?16?32?01??1???? </span>    <span class="token keyword">int</span> bitcount<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x55</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0x55</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mask1 <span class="token operator">=</span> <span class="token punctuation">(</span>tmp1<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>tmp1<span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//????? 01010101��01010101</span>    <span class="token keyword">int</span> tmp2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x33</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0x33</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mask2 <span class="token operator">=</span> <span class="token punctuation">(</span>tmp2<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>tmp2<span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//????? 00110011��00110011</span>    <span class="token keyword">int</span> tmp3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0x0f</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mask3 <span class="token operator">=</span> <span class="token punctuation">(</span>tmp3<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>tmp3<span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//????? 00001111��00001111</span>    <span class="token keyword">int</span> mask4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//????? 0000 0000 1111 1111 0000 0000 1111 1111</span>    <span class="token keyword">int</span> mask5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//????? 0000 0000 0000 0000 1111 1111 1111 1111</span>    bitcount <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> mask1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//??????2??????1??????????2??????1???????? </span>    bitcount <span class="token operator">=</span> <span class="token punctuation">(</span>bitcount <span class="token operator">&amp;</span> mask2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bitcount <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask2<span class="token punctuation">)</span><span class="token punctuation">;</span>    bitcount <span class="token operator">=</span> <span class="token punctuation">(</span>bitcount <span class="token operator">+</span> <span class="token punctuation">(</span>bitcount <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask3<span class="token punctuation">;</span>    bitcount <span class="token operator">=</span> <span class="token punctuation">(</span>bitcount <span class="token operator">+</span> <span class="token punctuation">(</span>bitcount <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask4<span class="token punctuation">;</span>    bitcount <span class="token operator">=</span> <span class="token punctuation">(</span>bitcount <span class="token operator">+</span> <span class="token punctuation">(</span>bitcount <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask5<span class="token punctuation">;</span>    <span class="token keyword">return</span> bitcount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * bang - Compute !x without using ! *   Examples: bang(3) = 0, bang(0) = 1 *   Legal ops: ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 12 *   Rating: 4  */</span><span class="token keyword">int</span> <span class="token function">bang</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">|</span> x<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//??0??+1????0?????x?0?????31???0?+1?????1. ????????????????????????????????31??????-1?+1?????0.</span><span class="token comment" spellcheck="true">/*  * tmin - return minimum two's complement integer  *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 4 *   Rating: 1 */</span><span class="token keyword">int</span> <span class="token function">tmin</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ???????????1????31??????????????????</span><span class="token comment" spellcheck="true">/*  * fitsBits - return 1 if x can be represented as an  *  n-bit, two's complement integer. *   1 &lt;= n &lt;= 32 *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 15 *   Rating: 2 */</span><span class="token keyword">int</span> <span class="token function">fitsBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// x????n???? ??32-n????32-n????????? </span>    <span class="token keyword">int</span> shift <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token operator">~</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> x <span class="token operator">&lt;&lt;</span> shift <span class="token operator">>></span> shift<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>t <span class="token operator">^</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// x?????n???? ??32-n????32-n????????????????</span><span class="token comment" spellcheck="true">/*  * divpwr2 - Compute x/(2^n), for 0 &lt;= n &lt;= 30 *  Round toward zero *   Examples: divpwr2(15,1) = 7, divpwr2(-33,4) = -2 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 15 *   Rating: 2 */</span><span class="token keyword">int</span> <span class="token function">divpwr2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ?????????????????????????????????????-5/2 = -3??? </span>    <span class="token keyword">int</span> sign <span class="token operator">=</span> x <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ?? </span><span class="token comment" spellcheck="true">//    cout &lt;&lt; (1 &lt;&lt; n) + ~0 &lt;&lt; endl; </span><span class="token comment" spellcheck="true">//    cout &lt;&lt; "(sign &amp; ((1 &lt;&lt; n) + ~0)) = " &lt;&lt; (sign &amp; ((1 &lt;&lt; n) + ~0)) &lt;&lt; endl;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>sign <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ???????0???????????????????-5/2 = -3???????0????????????????????????????????????</span><span class="token comment" spellcheck="true">/*  * negate - return -x  *   Example: negate(1) = -1. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 5 *   Rating: 2 */</span><span class="token keyword">int</span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ?????????+1.</span><span class="token comment" spellcheck="true">/*  * isPositive - return 1 if x > 0, return 0 otherwise  *   Example: isPositive(-1) = 0. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 8 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">isPositive</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ????????????0</span> <span class="token comment" spellcheck="true">// ????????????????</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ????????????0</span><span class="token comment" spellcheck="true">/*  * isLessOrEqual - if x &lt;= y  then return 1, else return 0  *   Example: isLessOrEqual(4,5) = 1. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 24 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">isLessOrEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ??????????</span><span class="token keyword">int</span> xl <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> yl <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> zl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xl <span class="token operator">^</span> yl<span class="token punctuation">)</span> <span class="token operator">&amp;</span> xl<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>xl <span class="token operator">^</span> yl<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">!</span>zl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ??????????????isPositive?????????????????????</span><span class="token comment" spellcheck="true">// ???????????????x&lt;0?y>=0,????????1???????????y-x???????0???x????y?</span><span class="token comment" spellcheck="true">/* * ilog2 - return floor(log base 2 of x), where x > 0 *   Example: ilog2(16) = 4 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 90 *   Rating: 4 */</span><span class="token keyword">int</span> <span class="token function">ilog2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ???????1???+?????&lt;&lt;????????? </span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>    id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    id <span class="token operator">=</span> id <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ??????log2?log2n?????????1???????????????1???????16?????????????????id??????id???????+?????&lt;&lt;????????? </span><span class="token comment" spellcheck="true">/*  * float_neg - Return bit-level equivalent of expression -f for *   floating point argument f. *   Both the argument and result are passed as unsigned int's, but *   they are to be interpreted as the bit-level representations of *   single-precision floating point values. *   When argument is NaN, return argument. *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while *   Max ops: 10 *   Rating: 2 */</span><span class="token keyword">unsigned</span> <span class="token function">float_neg</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">&amp;</span> <span class="token number">0xFF000000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF000000</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token number">0xFF000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> uf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>uf <span class="token operator">+</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1????????NAN??????????NAN</span><span class="token comment" spellcheck="true">// 2?????????????????????????????????????????????????+1??????????????</span><span class="token comment" spellcheck="true">/*  * float_i2f - Return bit-level equivalent of expression (float) x *   Result is returned as unsigned int, but *   it is to be interpreted as the bit-level representation of a *   single-precision floating point values. *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while *   Max ops: 30 *   Rating: 4 */</span><span class="token keyword">unsigned</span> <span class="token function">float_i2f</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ????????????????????????????? </span>    <span class="token keyword">int</span> sign<span class="token punctuation">,</span> id<span class="token punctuation">,</span> shr<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> tmp<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    sign <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sign<span class="token punctuation">)</span> x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        id<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x = 5, id = 2, ??????1?? </span>    <span class="token punctuation">}</span>    tmp <span class="token operator">=</span> x <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 23???????? </span>    shr <span class="token operator">=</span> <span class="token punctuation">(</span>tmp <span class="token operator">&amp;</span> <span class="token number">0x1ff</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ???? </span>    tmp <span class="token operator">=</span> tmp <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ?????</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">127</span> <span class="token operator">+</span> id<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ???</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shr <span class="token operator">></span> <span class="token number">128</span> <span class="token operator">||</span> <span class="token punctuation">(</span>shr <span class="token operator">==</span> <span class="token number">128</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tmp <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>tmp <span class="token operator">+</span> mid <span class="token operator">+</span> sign<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*  * float_twice - Return bit-level equivalent of expression 2*f for *   floating point argument f. *   Both the argument and result are passed as unsigned int's, but *   they are to be interfrpreted as the bit-level representation of *   single-precision floating point values. *   When argument is NaN, return argument *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while *   Max ops: 30 *   Rating: 4 */</span><span class="token keyword">unsigned</span> <span class="token function">float_twice</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> s <span class="token operator">=</span> uf <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> e <span class="token operator">=</span> uf <span class="token operator">&amp;</span> <span class="token number">0x7f800000</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> m <span class="token operator">=</span> uf <span class="token operator">&amp;</span> <span class="token number">0x007fffff</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token number">0x7f800000</span><span class="token punctuation">)</span> <span class="token keyword">return</span> uf<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>  ans <span class="token operator">=</span> s <span class="token operator">+</span> e <span class="token operator">+</span> <span class="token number">0x00800000</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ????????????M??????????</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>汇编与gdb调试学习</title>
      <link href="/2019/03/09/hui-bian-yu-gdb-diao-shi-xue-xi/"/>
      <url>/2019/03/09/hui-bian-yu-gdb-diao-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h4 id="1、在gdb中如何列出汇编代码"><a href="#1、在gdb中如何列出汇编代码" class="headerlink" title="1、在gdb中如何列出汇编代码"></a>1、在gdb中如何列出汇编代码</h4><p>应该是不可以用list 命令列出汇编代码的。<br>但可以使用<code>display /i $pc</code> 命令在调试的时候出了列出一行源码，也列出相应的汇编代码<br>同时，s和si等的区别还是比较大的：si按汇编一行一行执行，有的源码一行会有很多条汇编；<br>我认为这是个学习汇编的好方法：<strong>使用gdb一步一步调试，对比汇编和源码</strong></p><h4 id="2、如何将一个可执行文件或者是-o文件得到它的汇编码或者是源码？"><a href="#2、如何将一个可执行文件或者是-o文件得到它的汇编码或者是源码？" class="headerlink" title="2、如何将一个可执行文件或者是.o文件得到它的汇编码或者是源码？"></a>2、如何将一个可执行文件或者是.o文件得到它的汇编码或者是源码？</h4><p>可以使用<code>objdump -d test.out</code> 获取汇编代码（右侧）以及机器码（左侧）；要查看但里面有很多除我写的东西之外的东西，要具体定位到自己写的东西，可根据函数名查看。</p><p>如果编译时<strong>使用了-g参数</strong>的话，使用<code>objdump -dS test</code> 就可以得到机器码，源码，汇编码一一对应了！但如果没用-g的话，可执行文件是没有源码信息的，这时需要通过特殊手段得到。</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0wz27sv1rj30s60gwjy7.jpg" alt="在这里插入图片描述"></p><h4 id="3、将c源码变成-o文件，会不会很干净，和变成可执行文件的区别？体量？"><a href="#3、将c源码变成-o文件，会不会很干净，和变成可执行文件的区别？体量？" class="headerlink" title="3、将c源码变成.o文件，会不会很干净，和变成可执行文件的区别？体量？"></a>3、将c源码变成.o文件，会不会很干净，和变成可执行文件的区别？体量？</h4><p>编译过程图，来源：<a href="https://blog.csdn.net/misskissC/article/details/38020151" target="_blank" rel="noopener">https://blog.csdn.net/misskissC/article/details/38020151</a><br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0wz3cnv22j30dk07874k.jpg" alt="在这里插入图片描述"><br>和期待的相符，没有目标文件的链接过程，.o 文件果然很干净，使用-d命令查看的话，可以只看我自己写的代码部分！但是没有 -g 的话没有源码。<br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0wz3qgssaj30uu0t3dpz.jpg" alt="在这里插入图片描述"><br>同样和期待的相符，加了-g之后，成功出现源码<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz49e2xnj30r30oyq8r.jpg" alt="在这里插入图片描述"></p><h4 id="4、c代码变成-s文件，如何精确捕捉到我写的函数的内容？"><a href="#4、c代码变成-s文件，如何精确捕捉到我写的函数的内容？" class="headerlink" title="4、c代码变成.s文件，如何精确捕捉到我写的函数的内容？"></a>4、c代码变成.s文件，如何精确捕捉到我写的函数的内容？</h4><p>额，我发现.s 文件还是非常干净的，没有什么特别多的其他文件，想要找哪个函数，前面都有名字的。 尝试是由-g会有什么区别码？<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz4p1qm5j30hd0kt41y.jpg" alt="在这里插入图片描述"><br>加了-g 参数后，生成的.s 文件果然多了很多不认识的东西，仔细找了下后，发现并没有看到源码的字符串，可能是以某种特殊的方式编码了？如图是对比，左侧是加了 -g的，而右侧是没有加的。<br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0wz509prej31el0k5wmu.jpg" alt="在这里插入图片描述"><br>我们来验证以下，这个加了-g的.s文件，是否真的是包含了我源码的信息？</p><p>验证通过，确实有，哈哈<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz5i91ybj30nn0scq9h.jpg" alt="在这里插入图片描述"></p><h4 id="5、各种情况的编译失败是在编译的过程是哪一步？"><a href="#5、各种情况的编译失败是在编译的过程是哪一步？" class="headerlink" title="5、各种情况的编译失败是在编译的过程是哪一步？"></a>5、各种情况的编译失败是在编译的过程是哪一步？</h4><p>在编译c语言的时候，通常是一步全编译，我们来尝试分部编译，探究不同错误的编译失败地点。<br>1、如果我只是写一个函数而没有main函数，可以进行到哪一步？<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz5u0tlsj30er05s3yw.jpg" alt="在这里插入图片描述"><br>编译成汇编代码居然就报错了！预处理的话还是可以的<br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0wzcl23cbj30vx05176q.jpg" alt="在这里插入图片描述"></p><p>2、不小心没写分号 ;<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz6h56eaj30pi09kq3z.jpg" alt="在这里插入图片描述"><br>额，看来还是这个源码变成汇编的过程过程<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz6uqm52j30mu03kabl.jpg" alt="在这里插入图片描述"><br>我突然想到，整个编译的大过程分为<code>预处理-&gt;编译-&gt;汇编-&gt;链接</code>，那么可能语法问题之类的都是在<code>编译</code>这个小过程被发现的吧。</p><h4 id="6、list命令用法"><a href="#6、list命令用法" class="headerlink" title="6、list命令用法"></a>6、list命令用法</h4><p>默认显示10行，可使用<code>list 1,1000</code> 来获取更多行的代码<br>使用<code>list +/-</code> 用以继续，和查看更前的源码<br><code>set listsize 20</code> 设置显示行数<br><code>show listsize</code> 查看显示行数</p><h4 id="7、删除断点：d-b"><a href="#7、删除断点：d-b" class="headerlink" title="7、删除断点：d b"></a>7、删除断点：<code>d b</code></h4><p>查看断点：<br><code>info b</code><br><code>info watch</code></p><hr><p>查表<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz788t0zj30u30gtjsb.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/09/hello-world/"/>
      <url>/2019/03/09/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="你好，世界！"><a href="#你好，世界！" class="headerlink" title="你好，世界！"></a>你好，世界！</h1><p>今天是本博客诞生的第一天，向世界问好！</p><p><code>hello, world!</code></p><h2 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello, world!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="c"><a href="#c" class="headerlink" title="c"></a>c</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span>"hello<span class="token punctuation">,</span> world<span class="token operator">!</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><pre class=" language-py"><code class="language-py">print('hello, world!\n')</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2017/09/19/test/"/>
      <url>/2017/09/19/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
