<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>汇编与gdb调试学习</title>
      <link href="/JameyWoo.github.io/2019/03/09/%E6%B1%87%E7%BC%96%E4%B8%8Egdb%E8%B0%83%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/JameyWoo.github.io/2019/03/09/%E6%B1%87%E7%BC%96%E4%B8%8Egdb%E8%B0%83%E8%AF%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\JameyWoo.github.io\assets\css\APlayer.min.css"><script src="\JameyWoo.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、在gdb中如何列出汇编代码-–-为何"><a href="#1、在gdb中如何列出汇编代码-–-为何" class="headerlink" title="1、在gdb中如何列出汇编代码 – 为何"></a>1、在gdb中如何列出汇编代码 – 为何</h4><p>应该是不可以用list 命令列出汇编代码的。<br>但可以使用<code>display /i $pc</code> 命令在调试的时候出了列出一行源码，也列出相应的汇编代码<br>同时，s和si等的区别还是比较大的：si按汇编一行一行执行，有的源码一行会有很多条汇编；<br>我认为这是个学习汇编的好方法：<strong>使用gdb一步一步调试，对比汇编和源码</strong></p><h4 id="2、如何将一个可执行文件或者是-o文件得到它的汇编码或者是源码？"><a href="#2、如何将一个可执行文件或者是-o文件得到它的汇编码或者是源码？" class="headerlink" title="2、如何将一个可执行文件或者是.o文件得到它的汇编码或者是源码？"></a>2、如何将一个可执行文件或者是.o文件得到它的汇编码或者是源码？</h4><p>可以使用<code>objdump -d test.out</code> 获取汇编代码（右侧）以及机器码（左侧）；要查看但里面有很多除我写的东西之外的东西，要具体定位到自己写的东西，可根据函数名查看。</p><p>如果编译时<strong>使用了-g参数</strong>的话，使用<code>objdump -dS test</code> 就可以得到机器码，源码，汇编码一一对应了！但如果没用-g的话，可执行文件是没有源码信息的，这时需要通过特殊手段得到。</p><p><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0wz27sv1rj30s60gwjy7.jpg" alt="在这里插入图片描述"></p><h4 id="3、将c源码变成-o文件，会不会很干净，和变成可执行文件的区别？体量？"><a href="#3、将c源码变成-o文件，会不会很干净，和变成可执行文件的区别？体量？" class="headerlink" title="3、将c源码变成.o文件，会不会很干净，和变成可执行文件的区别？体量？"></a>3、将c源码变成.o文件，会不会很干净，和变成可执行文件的区别？体量？</h4><p>编译过程图，来源：<a href="https://blog.csdn.net/misskissC/article/details/38020151" target="_blank" rel="noopener">https://blog.csdn.net/misskissC/article/details/38020151</a><br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0wz3cnv22j30dk07874k.jpg" alt="在这里插入图片描述"><br>和期待的相符，没有目标文件的链接过程，.o 文件果然很干净，使用-d命令查看的话，可以只看我自己写的代码部分！但是没有 -g 的话没有源码。<br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0wz3qgssaj30uu0t3dpz.jpg" alt="在这里插入图片描述"><br>同样和期待的相符，加了-g之后，成功出现源码<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz49e2xnj30r30oyq8r.jpg" alt="在这里插入图片描述"></p><h4 id="4、c代码变成-s文件，如何精确捕捉到我写的函数的内容？"><a href="#4、c代码变成-s文件，如何精确捕捉到我写的函数的内容？" class="headerlink" title="4、c代码变成.s文件，如何精确捕捉到我写的函数的内容？"></a>4、c代码变成.s文件，如何精确捕捉到我写的函数的内容？</h4><p>额，我发现.s 文件还是非常干净的，没有什么特别多的其他文件，想要找哪个函数，前面都有名字的。 尝试是由-g会有什么区别码？<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz4p1qm5j30hd0kt41y.jpg" alt="在这里插入图片描述"><br>加了-g 参数后，生成的.s 文件果然多了很多不认识的东西，仔细找了下后，发现并没有看到源码的字符串，可能是以某种特殊的方式编码了？如图是对比，左侧是加了 -g的，而右侧是没有加的。<br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0wz509prej31el0k5wmu.jpg" alt="在这里插入图片描述"><br>我们来验证以下，这个加了-g的.s文件，是否真的是包含了我源码的信息？</p><p>验证通过，确实有，哈哈<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz5i91ybj30nn0scq9h.jpg" alt="在这里插入图片描述"></p><h4 id="5、各种情况的编译失败是在编译的过程是哪一步？"><a href="#5、各种情况的编译失败是在编译的过程是哪一步？" class="headerlink" title="5、各种情况的编译失败是在编译的过程是哪一步？"></a>5、各种情况的编译失败是在编译的过程是哪一步？</h4><p>在编译c语言的时候，通常是一步全编译，我们来尝试分部编译，探究不同错误的编译失败地点。<br>1、如果我只是写一个函数而没有main函数，可以进行到哪一步？<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz5u0tlsj30er05s3yw.jpg" alt="在这里插入图片描述"><br>编译成汇编代码居然就报错了！预处理的话还是可以的<br><img src="https://ws3.sinaimg.cn/large/005BYqpggy1g0wzcl23cbj30vx05176q.jpg" alt="在这里插入图片描述"></p><p>2、不小心没写分号 ;<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz6h56eaj30pi09kq3z.jpg" alt="在这里插入图片描述"><br>额，看来还是这个源码变成汇编的过程过程<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz6uqm52j30mu03kabl.jpg" alt="在这里插入图片描述"><br>我突然想到，整个编译的大过程分为<code>预处理-&gt;编译-&gt;汇编-&gt;链接</code>，那么可能语法问题之类的都是在<code>编译</code>这个小过程被发现的吧。</p><h4 id="6、list命令用法"><a href="#6、list命令用法" class="headerlink" title="6、list命令用法"></a>6、list命令用法</h4><p>默认显示10行，可使用<code>list 1,1000</code> 来获取更多行的代码<br>使用<code>list +/-</code> 用以继续，和查看更前的源码<br><code>set listsize 20</code> 设置显示行数<br><code>show listsize</code> 查看显示行数</p><h4 id="7、删除断点：d-b"><a href="#7、删除断点：d-b" class="headerlink" title="7、删除断点：d b"></a>7、删除断点：<code>d b</code></h4><p>查看断点：<br><code>info b</code><br><code>info watch</code></p><hr><p>查表<br><img src="https://ws3.sinaimg.cn/large/005BYqpgly1g0wz788t0zj30u30gtjsb.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/JameyWoo.github.io/2019/03/09/hello-world/"/>
      <url>/JameyWoo.github.io/2019/03/09/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\JameyWoo.github.io\assets\css\APlayer.min.css"><script src="\JameyWoo.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
